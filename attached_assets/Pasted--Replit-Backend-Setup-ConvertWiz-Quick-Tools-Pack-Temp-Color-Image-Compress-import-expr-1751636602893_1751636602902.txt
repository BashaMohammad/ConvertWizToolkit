// ✅ Replit Backend Setup – ConvertWiz Quick Tools Pack (Temp, Color, Image Compress)

import express from 'express';
import bodyParser from 'body-parser';
import multer from 'multer';
import sharp from 'sharp';

const app = express();
app.use(bodyParser.json());

const upload = multer({ storage: multer.memoryStorage() });

// ✅ Temperature Converter Endpoint
app.post('/api/temperature-converter', (req, res) => {
  const { value, fromUnit } = req.body;
  const input = parseFloat(value);
  if (isNaN(input)) return res.status(400).json({ error: 'Invalid temperature input' });

  let celsius, fahrenheit, kelvin;
  switch (fromUnit) {
    case 'C':
      celsius = input;
      fahrenheit = (input * 9/5) + 32;
      kelvin = input + 273.15;
      break;
    case 'F':
      celsius = (input - 32) * 5/9;
      fahrenheit = input;
      kelvin = celsius + 273.15;
      break;
    case 'K':
      celsius = input - 273.15;
      fahrenheit = (celsius * 9/5) + 32;
      kelvin = input;
      break;
    default:
      return res.status(400).json({ error: 'Invalid unit' });
  }
  res.json({ celsius, fahrenheit, kelvin });
});

// ✅ Color Converter Endpoint (HEX ↔ RGB ↔ HSL)
app.post('/api/color-converter', (req, res) => {
  const { hex } = req.body;
  if (!/^#[0-9A-F]{6}$/i.test(hex)) return res.status(400).json({ error: 'Invalid HEX color' });

  const r = parseInt(hex.slice(1, 3), 16);
  const g = parseInt(hex.slice(3, 5), 16);
  const b = parseInt(hex.slice(5, 7), 16);

  const rgb = `rgb(${r}, ${g}, ${b})`;

  const rNorm = r / 255, gNorm = g / 255, bNorm = b / 255;
  const max = Math.max(rNorm, gNorm, bNorm), min = Math.min(rNorm, gNorm, bNorm);
  let h, s, l = (max + min) / 2;

  if (max === min) {
    h = s = 0;
  } else {
    const d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case rNorm: h = (gNorm - bNorm) / d + (gNorm < bNorm ? 6 : 0); break;
      case gNorm: h = (bNorm - rNorm) / d + 2; break;
      case bNorm: h = (rNorm - gNorm) / d + 4; break;
    }
    h /= 6;
  }

  const hsl = `hsl(${Math.round(h * 360)}, ${Math.round(s * 100)}%, ${Math.round(l * 100)}%)`;

  res.json({ hex, rgb, hsl });
});

// ✅ Image Compressor Endpoint (JPG/PNG)
app.post('/api/image-compressor', upload.single('image'), async (req, res) => {
  if (!req.file) return res.status(400).json({ error: 'No file uploaded' });
  try {
    const compressed = await sharp(req.file.buffer)
      .jpeg({ quality: 60 })
      .toBuffer();

    res.set('Content-Type', 'image/jpeg');
    res.send(compressed);
  } catch (error) {
    console.error('Compression failed:', error);
    res.status(500).json({ error: 'Compression error' });
  }
});

// ✅ Server Start
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`ConvertWiz backend running with new tools on port ${PORT}`));
