// 📸 ConvertWiz – Instagram DP Resizer Component
// Replit Prompt: Build a responsive tool that resizes any image to Instagram DP size (1:1 aspect ratio)

/*
🎯 Objective:
- Allow users to upload any image (JPG/PNG/WebP)
- Crop/resize to 1:1 square format (320x320 px)
- Preview and download resized image
- Optional: Add background fill for non-square images
- Support drag & drop + manual upload
*/

const dpSize = 320;

function resizeToSquareDP(imageFile) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => {
      const img = new Image();
      img.onload = () => {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');

        canvas.width = dpSize;
        canvas.height = dpSize;

        // Fill background (white or Instagram gradient optional)
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(0, 0, dpSize, dpSize);

        // Calculate aspect-fit size
        let ratio = Math.min(dpSize / img.width, dpSize / img.height);
        let newWidth = img.width * ratio;
        let newHeight = img.height * ratio;

        let xOffset = (dpSize - newWidth) / 2;
        let yOffset = (dpSize - newHeight) / 2;

        ctx.drawImage(img, xOffset, yOffset, newWidth, newHeight);

        canvas.toBlob(blob => {
          resolve({
            blob,
            preview: canvas.toDataURL('image/png')
          });
        }, 'image/png');
      };
      img.onerror = reject;
      img.src = reader.result;
    };
    reader.onerror = reject;
    reader.readAsDataURL(imageFile);
  });
}

// Sample UI Event Binding (integrate into main UI code)
document.getElementById('dp-upload').addEventListener('change', async (e) => {
  const file = e.target.files[0];
  if (!file) return;

  const { blob, preview } = await resizeToSquareDP(file);

  document.getElementById('dp-preview').src = preview;

  const downloadBtn = document.getElementById('dp-download');
  const url = URL.createObjectURL(blob);
  downloadBtn.href = url;
  downloadBtn.download = 'Instagram-DP.png';
  downloadBtn.style.display = 'inline-block';
});

/*
✅ UI Requirements:
- Upload Button / Drag-Drop Area
- Preview Container (shows resized DP)
- Download Button (appears after conversion)
- Responsive Layout with 1:1 crop preview
*/


// ✍️ ConvertWiz – Word Counter Component
// Replit Prompt: Build a responsive tool that counts words, characters, and estimated reading time

function updateWordStats(inputText) {
  const words = inputText.trim().split(/\s+/).filter(Boolean);
  const characters = inputText.length;
  const wordCount = words.length;
  const estimatedReadTime = Math.ceil(wordCount / 200); // Avg 200 WPM

  document.getElementById('word-count').textContent = wordCount;
  document.getElementById('char-count').textContent = characters;
  document.getElementById('read-time').textContent = estimatedReadTime + ' min';
}

// Event Binding
const wordInput = document.getElementById('word-input');
if (wordInput) {
  wordInput.addEventListener('input', () => {
    updateWordStats(wordInput.value);
  });
}

/*
✅ UI Requirements:
- Large Textarea Input (id="word-input")
- Live Stats Section:
  - Word Count (id="word-count")
  - Character Count (id="char-count")
  - Reading Time Estimate (id="read-time")
- Optional: Copy Text + Clear Buttons
- Responsive layout
*/
